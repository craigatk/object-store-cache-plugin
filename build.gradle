buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.10.1"
    id 'groovy'
    id "dev.projektor.publish" version "3.0.0"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
}

apply plugin: "kotlin"

sourceCompatibility = 11

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

gradlePlugin {
    plugins {
        objectStoreCachePlugin {
            id = 'com.atkinsondev.object-store-cache'
            implementationClass = 'com.atkinsondev.cache.ObjectStoreCachePlugin'
        }
    }
    testSourceSets sourceSets.test, sourceSets.functionalTest
}

pluginBundle {
    website = 'https://github.com/craigatk/object-store-gradle-cache'
    vcsUrl = 'https://github.com/craigatk/object-store-gradle-cache'
    description = 'Use an S3-compatible object store as a Gradle build cache backend'
    tags = ['cache']

    plugins {
        objectStoreCachePlugin {
            displayName = 'Object store cache plugin'
        }
    }
}

repositories {
    jcenter()
}

group = "com.atkinsondev.gradle"
version = "0.0.2"

dependencies {
    implementation 'io.minio:minio:6.0.13'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'io.github.microutils:kotlin-logging:1.7.9'

    testImplementation('org.spockframework:spock-core:1.3-groovy-2.5')
    testImplementation "org.apache.commons:commons-lang3:3.8.1"

    functionalTestImplementation('org.spockframework:spock-core:1.3-groovy-2.5')
    functionalTestImplementation "org.apache.commons:commons-lang3:3.8.1"
    functionalTestImplementation gradleTestKit()
}

test {
    maxParallelForks = Math.floorDiv(Runtime.runtime.availableProcessors(), 2) + 1

    testLogging {
        exceptionFormat = 'full'
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}
check.dependsOn functionalTest

projektor {
    serverUrl = "https://projektorlive.herokuapp.com"
    publishToken = System.getenv("PROJEKTOR_TOKEN") ?: project.findProperty('projektor_publish_token') ?: null
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

task format(dependsOn: ktlintFormat)

// Getting the plugin files onto the classpath for a Settings plugin requires some trickery,
// big thanks to GitHub user boazj, who figured out a way - https://github.com/boazj/gradle-testkit-project-dir-issue
task createClasspathManifest {
    def outputDir = file("${buildDir}/${name}")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}
functionalTest.dependsOn(createClasspathManifest)
