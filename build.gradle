buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "1.2.0"
    id 'groovy'
    id "dev.projektor.publish" version "8.2.0"
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
    id "com.atkinsondev.opentelemetry-build" version "1.4.0"
}

apply plugin: "kotlin"

sourceCompatibility = 11

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

gradlePlugin {
    plugins {
        objectStoreCachePlugin {
            id = 'com.atkinsondev.object-store-cache'
            implementationClass = 'com.atkinsondev.cache.ObjectStoreCachePlugin'
            displayName = 'Object store cache plugin'
            description = "Use an S3-compatible object store as the backend for a Gradle remote build cache"
        }
    }
}

pluginBundle {
    website = 'https://github.com/craigatk/object-store-cache-plugin'
    vcsUrl = 'https://github.com/craigatk/object-store-cache-plugin'
    description = 'Use an S3-compatible object store as a Gradle build cache backend'
    tags = ['build-cache']
}

repositories {
    mavenCentral()
}

group = "com.atkinsondev.gradle"
version = "1.4.0"

dependencies {
    implementation 'io.minio:minio:6.0.13'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'io.github.microutils:kotlin-logging:3.0.4'

    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0')
    testImplementation('org.spockframework:spock-junit4:2.3-groovy-3.0')
    testImplementation "org.apache.commons:commons-lang3:3.12.0"
    testImplementation 'io.minio:minio:6.0.13'
    testImplementation gradleTestKit()
}

test {
    useJUnitPlatform()

    maxParallelForks = Math.floorDiv(Runtime.runtime.availableProcessors(), 2) + 1

    testLogging {
        exceptionFormat = 'full'
    }
}

projektor {
    serverUrl = "https://projektorlive.herokuapp.com"
    publishToken = System.getenv("PROJEKTOR_TOKEN") ?: project.findProperty('projektor_publish_token') ?: null
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

task format(dependsOn: ktlintFormat)

// Getting the plugin files onto the classpath for a Settings plugin requires some trickery,
// big thanks to GitHub user boazj, who figured out a way - https://github.com/boazj/gradle-testkit-project-dir-issue
task createClasspathManifest {
    def outputDir = file("${buildDir}/${name}")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}
test.dependsOn(createClasspathManifest)

tasks.withType(Groovydoc).all { enabled = false }

openTelemetryBuild {
    endpoint = "https://api.honeycomb.io"
    headers = [
            "x-honeycomb-team": System.getenv("HONEYCOMB_API_KEY") ?: project.findProperty('honeycomb_api_key') ?: null,
            "x-honeycomb-dataset": "otel-gradle"
    ]
}
